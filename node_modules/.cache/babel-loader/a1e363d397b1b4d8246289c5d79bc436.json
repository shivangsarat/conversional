{"ast":null,"code":"import { createElement, useEffect, useState } from \"react\";\nimport { BoxComponent } from \"./BoxComponent\";\nimport { ButtonComponent } from \"./ButtonComponent\";\nimport { LinkComponent } from \"./LinkComponent\";\nimport { ListComponent } from \"./ListComponent\";\nimport { ParagraphComponent } from \"./ParagraphComponent\";\nimport { H1Component } from \"./H1Component\";\nimport { H2Component } from \"./H2Component\";\nimport { ModalComponent } from \"./ModalComponent\";\nconst keysToComponentMap = {\n  BoxComponent: BoxComponent,\n  ParagraphComponent: ParagraphComponent,\n  ListComponent: ListComponent,\n  LinkComponent: LinkComponent,\n  ButtonComponent: ButtonComponent,\n  H1Component: H1Component,\n  H2Component: H2Component,\n  ModalComponent: ModalComponent\n};\nexport const RennderComponents = config => {\n  let children = [];\n\n  for (const key in config.Children) {\n    children.push(config.Children[key]);\n  }\n\n  const cb = (component, cbdata) => {\n    console.log(\"cb\", component, cbdata);\n    console.log(\"typeof\", typeof callback); // callback({component, cbdata})\n  };\n\n  if (config && config.Content && config.Content.type && typeof keysToComponentMap[config.Content.type] !== 'undefined') {\n    return /*#__PURE__*/createElement(keysToComponentMap[config.Content.type], {\n      props: config.Content.props ? config.Content.props : {},\n      className: config.Content.className ? config.Content.className : null,\n      id: config.Content.id ? config.Content.id : null,\n      cb: cb,\n      open: true\n    }, children.length > 0 && children.map(c => RennderComponents(c)));\n  }\n};\n_c = RennderComponents;\n\nvar _c;\n\n$RefreshReg$(_c, \"RennderComponents\");","map":{"version":3,"sources":["/Users/shivangsarat/Desktop/projects/conversional/src/components/RenderComponent.js"],"names":["createElement","useEffect","useState","BoxComponent","ButtonComponent","LinkComponent","ListComponent","ParagraphComponent","H1Component","H2Component","ModalComponent","keysToComponentMap","RennderComponents","config","children","key","Children","push","cb","component","cbdata","console","log","callback","Content","type","props","className","id","open","length","map","c"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,MAAMC,kBAAkB,GAAG;AACvBR,EAAAA,YAAY,EAAEA,YADS;AAEvBI,EAAAA,kBAAkB,EAAEA,kBAFG;AAGvBD,EAAAA,aAAa,EAAEA,aAHQ;AAIvBD,EAAAA,aAAa,EAAEA,aAJQ;AAKvBD,EAAAA,eAAe,EAAEA,eALM;AAMvBI,EAAAA,WAAW,EAAEA,WANU;AAOvBC,EAAAA,WAAW,EAAEA,WAPU;AAQvBC,EAAAA,cAAc,EAAEA;AARO,CAA3B;AAWA,OAAO,MAAME,iBAAiB,GAAGC,MAAM,IAAI;AACvC,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,MAAMC,GAAX,IAAkBF,MAAM,CAACG,QAAzB,EAAmC;AAC/BF,IAAAA,QAAQ,CAACG,IAAT,CAAcJ,MAAM,CAACG,QAAP,CAAgBD,GAAhB,CAAd;AACH;;AACD,QAAMG,EAAE,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBH,SAAlB,EAA6BC,MAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,OAAOC,QAA7B,EAF8B,CAG9B;AACH,GAJD;;AAKA,MAAIV,MAAM,IAAIA,MAAM,CAACW,OAAjB,IAA4BX,MAAM,CAACW,OAAP,CAAeC,IAA3C,IAAmD,OAAOd,kBAAkB,CAACE,MAAM,CAACW,OAAP,CAAeC,IAAhB,CAAzB,KAAmD,WAA1G,EAAuH;AACnH,wBAAOzB,aAAa,CAChBW,kBAAkB,CAACE,MAAM,CAACW,OAAP,CAAeC,IAAhB,CADF,EAEhB;AACIC,MAAAA,KAAK,EAAEb,MAAM,CAACW,OAAP,CAAeE,KAAf,GAAuBb,MAAM,CAACW,OAAP,CAAeE,KAAtC,GAA8C,EADzD;AAEIC,MAAAA,SAAS,EAAEd,MAAM,CAACW,OAAP,CAAeG,SAAf,GAA2Bd,MAAM,CAACW,OAAP,CAAeG,SAA1C,GAAsD,IAFrE;AAGIC,MAAAA,EAAE,EAAEf,MAAM,CAACW,OAAP,CAAeI,EAAf,GAAoBf,MAAM,CAACW,OAAP,CAAeI,EAAnC,GAAwC,IAHhD;AAIIV,MAAAA,EAAE,EAAEA,EAJR;AAKIW,MAAAA,IAAI,EAAE;AALV,KAFgB,EAShBf,QAAQ,CAACgB,MAAT,GAAkB,CAAlB,IAAuBhB,QAAQ,CAACiB,GAAT,CAAcC,CAAC,IAAIpB,iBAAiB,CAACoB,CAAD,CAApC,CATP,CAApB;AAWH;AACJ,CAvBM;KAAMpB,iB","sourcesContent":["import { createElement, useEffect, useState } from \"react\";\nimport { BoxComponent } from \"./BoxComponent\";\nimport { ButtonComponent } from \"./ButtonComponent\";\nimport { LinkComponent } from \"./LinkComponent\";\nimport { ListComponent } from \"./ListComponent\";\nimport { ParagraphComponent } from \"./ParagraphComponent\";\nimport { H1Component } from \"./H1Component\";\nimport { H2Component } from \"./H2Component\";\nimport { ModalComponent } from \"./ModalComponent\";\n\nconst keysToComponentMap = {\n    BoxComponent: BoxComponent,\n    ParagraphComponent: ParagraphComponent,\n    ListComponent: ListComponent,\n    LinkComponent: LinkComponent,\n    ButtonComponent: ButtonComponent,\n    H1Component: H1Component,\n    H2Component: H2Component,\n    ModalComponent: ModalComponent\n}\n\nexport const RennderComponents = config => {\n    let children = []\n    for (const key in config.Children) {\n        children.push(config.Children[key])\n    }\n    const cb = (component, cbdata) => {\n        console.log(\"cb\", component, cbdata)\n        console.log(\"typeof\", typeof callback)\n        // callback({component, cbdata})\n    }\n    if (config && config.Content && config.Content.type && typeof keysToComponentMap[config.Content.type] !== 'undefined') {\n        return createElement(\n            keysToComponentMap[config.Content.type],\n            {\n                props: config.Content.props ? config.Content.props : {},\n                className: config.Content.className ? config.Content.className : null,\n                id: config.Content.id ? config.Content.id : null,\n                cb: cb,\n                open: true\n            },\n            children.length > 0 && children.map( c => RennderComponents(c))\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}